/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package project2;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.*;
import org.checkerframework.checker.units.qual.s;
import java.io.InputStreamReader;
import java.io.*;
import javax.swing.*;
import java.io.Console;

public class App {
    public static final String CREDENTIALS_STRING = "jdbc:mysql://tux-database.cmxvkfohfzm4.ap-southeast-2.rds.amazonaws.com:3306/a2?user=admin&password=password";
    public Employee employee;
    public User user;
    public int login_status = 0;    // 0 not login / 1 login 
    public List<Movie> movies;
    public List<Cinema> cinemas;
    public List<Session> sessions;
    public Session user_session_selection;
    public Cinema user_cinema_selection;
    public Movie user_movie_selection;
    public List<Integer> available_movies;
    public String lastSelectedSeat;
    public ArrayList<String> seatBasket = new ArrayList<String>();
    public ArrayList<String> age = new ArrayList<String>();
    public static double price;
    public int state = 1;
    public String last_card = "";
    public Boolean pay_with_card = false;
    public String user_id = "";

    public final int timeout = 30; // I set timeout to 30 seconds for demo

    

    public void run (){
        movies = getMovies();
        cinemas = getCinemas();
        sessions = getSessions();
        switch(getInterface()){
            case 1:
                //Cutomer Option - Guess/Login
                while (true){
                    switch(state){

                        //Login/Register
                        case 1:
                            state = customerSelect();
                            break;

                        //Dont use this
                        case 2:
                            
                            break;

                        //customerLogIn
                        case 3:
                            state = customerLogIn(false);
                            break;
                        //customerRegister
                        case 4:

                            state = customerRegister();
                            break;
                        // Select Cinema
                        case 5:
                            state = selectCinema();
                            break;

                        // Select Movie
                        case 6:
                            state = selectMovie();
                            break;

                        // Movie Detail
                        case 7:
                            state = viewDetail();
                            break;

                        // Movie Timetable
                        case 8:
                            state = ShowSchedule();
                            break;

                        // Booking 
                        case 9:
                            state = book();
                            break;

                        //
                        case 10:
                            state = bookingPage();
                            break;

                        //Free to use
                        case 11:
                            state = seatPage();
                            break;

                        //Free to use
                        case 12:
                            state = removeSeat();
                            break;

                        //payment
                        case 13:
                            state = payment();
                            break;  

                        //Free to use
                        case 14:
                            state = agePage();
                            break;
                        
                        //Free to use
                        case 15:
                            state = printTransaction();
                            break;

                        //Free to use
                        case 16:
                            state = saveCard();
                            break;  
                    }
                }

            case 2:
                //System.out.println("Inside Employee interface");
                while(true){
                    if (employeeLogIn(false) ==1){
                        break;
                    }
                }
                while(true){
                    //interface
                    switch (customerInterfaceSelection(employee.role)){
                        case 1:
                            //Todo [1] Insert movie to database.
                            employee.addMovie();

                            break;
                        case 2:
                            //Todo [2] Modify movie in database.
                            employee.modifyMovie();
                            break;
                        case 3:
                            //Todo [3] Delete movie in database.
                            employee.deleteMovie();
                            break;
                        case 4:
                            employee.selectionUpcoming(employee.selectUpcomingM(), employee.selectUpcomingC(), employee.selectionType(), employee.selectUpcomingDate(), employee.selectUpcomingSID());
                            //Todo [4] Insert show for upcoming week.
                            break;
                        case 5:
                            //Todo [5] Insert giftcard.
                            employee.addGiftCard();
                            break;
                        case 6:
                            //Todo [6] Generate summary of upcoing movies list.
                            break;
                        case 7:
                            //Todo [7] Generate summary of bookings for each movie session.
                            employee.bookingSummary(this.movies, this.cinemas, this.sessions);
                            break;
                        case 8:
                            employee.addEmployee();
                                break;
                        case 9:
                            employee.removeEmployee();
                                break;
                        case 10:
                            //Todo [10] Generate summary of cancelled transaction.
                            employee.cancelled_transaction_summary();
                            break;
                    }
                    if(employee.isTimeout == 1){
                        while(true){
                            if (employeeLogIn(false) ==1){
                                break;
                            }
                        }
                    }
                }
            default:
                System.exit(0);
                break;
        }
    }
    public static void main(String[] args) {
        App a = new App();
        a.run();
    
    }
    public static int getInterface(){
        System.out.println("------------------------------------------------\n");
        System.out.println("Please select interface.\n");
        System.out.println("[1] Launch Customer Application");
        System.out.println("[2] Launch Employee Application");
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);
        String ip = "0";
        ip  = sc.nextLine();

        if(ip.equals("1")){
            return 1;
        }
        else if (ip.equals("2")){
            return 2;
        }
        else{
            System.out.println("Invalid input. Terminating!");
            return -1;
        }
    }
    public int employeeLogIn(boolean debug){
        System.out.println("------------Log In------------- ");

        Scanner sc = new Scanner(System.in);

        String id = "";
        Console console = System.console();
        System.out.println("Enter your id");
        id = sc.nextLine();


        System.out.println("Enter your password");
        String password;
        password = masking(debug,sc);
        //System.out.println("[2] Launch Employee Application");
        try {
            Connection conn = DriverManager.getConnection(  CREDENTIALS_STRING);
            PreparedStatement preStatement = conn.prepareStatement("SELECT * FROM Employee_account WHERE eid = ? and password = ?");
            preStatement.setString(1,id);
            preStatement.setString(2,new String(password));
            ResultSet resultSet = preStatement.executeQuery();
            if  (resultSet.next() == false){
                System.out.println("Account id not exist, or password is incorrect.");
                return 2;
            }
            else {
                System.out.print("Hello, ");
                System.out.println(resultSet.getString("name"));
                int type = 0;
                if (resultSet.getString("type").equals("manager")) {
                    type = 1;
                }
                else{
                    type = 2;
                }
                employee = new Employee(resultSet.getString("name"),type);
                login_status =1;
                return 1;
            }
        } catch (Exception e){
            e.printStackTrace();

        }

        return 2;
    }
    public int book(){
        System.out.println("------------------------------------------------\n");
        System.out.println("Selection: " + user_cinema_selection.clocation + "\n" + "Movie: " + user_movie_selection.title + "\n" + "Time: " + user_session_selection.movieTime + "\n" + "Screen Type: " + user_session_selection.screen_type);
        System.out.println("Press 'y' to proceed to booking");
        System.out.println("Enter 'q' to go back to previous page");
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);
        String command = sc.nextLine();
        if(command.equals("y")){
            return 10;
        }
        else if(command.equals("q")){
            return 8;
        }
        return 9;
    }
    public int bookingPage(){
        System.out.println("------------------------------------------------\n");
        System.out.println("Seat in basket: ");
        if(seatBasket.size() == 0){
            System.out.println("Total: $0.00");
        }
        else if(seatBasket.size() > 0){
            int j = 0;
            int k = 1;
            for(String i: seatBasket){
                System.out.println("[" + k + "]" + " " + i + ", " + age.get(j));
                j+=1;
                k+=1;
            }
            System.out.println("Total: " + "$" + price);
        }
        System.out.println("");
        Scanner sc = new Scanner(System.in);
        System.out.println("[1] Add seat");
        System.out.println("[2] Remove seat");
        System.out.println("[3] Proceed to payment");
        System.out.println("Enter 'q' to return to previous page");
        System.out.println("\n------------------------------------------------");

        String choice ="";
        try{
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < timeout * 1000
                    && !in.ready()) {
                }
            if (in.ready()) {
                choice = in.readLine();
            } else {
                System.out.println("");
                System.out.println("********************************************************");
                System.out.println("*                                                      *");                                    
                System.out.println("*    Session Timeout! returning to Movie selection.    *");
                System.out.println("*                                                      *");
                System.out.println("********************************************************");
                System.out.println("");
                seatBasket = new ArrayList<String>(); 
                age = new ArrayList<String>();
                price =0;
                last_card = "";
                try {
                    Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                    PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                    update.setString(1, "Unsuccessful");
                    update.setString(2, "Session Timeout");
                    update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                    update.setString(4, user_id);
                    update.executeUpdate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return 6;
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }

        
        if(choice.equals("1")){
            return 11;
        }
        else if(choice.equals("2")){
            return 12;
        }
        else if(choice.equals("3")){
            return 13;
        }
        else if(choice.equals("q")){
            seatBasket = new ArrayList<String>(); 
            age = new ArrayList<String>();
            price =0;
            return 9;
        }
        return 10;
  

    }
    public int removeSeat(){
        System.out.println("------------------------------------------------\n");
        System.out.println("Pick a seat to remove");
        int j = 0;
        int k = 1;
        for(String i: seatBasket){
            System.out.println("[" + k + "]" + " " + i + ", " + age.get(j));
            j+=1;
            k+=1;
        }
        System.out.println("\n------------------------------------------------");
        try{
            Scanner sc = new Scanner(System.in);
            String choice = "";

            try{
                BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
                long startTime = System.currentTimeMillis();
                while ((System.currentTimeMillis() - startTime) < timeout * 1000
                        && !in.ready()) {
                    }
                if (in.ready()) {
                    choice = in.readLine();
                } else {
                    System.out.println("");
                    System.out.println("********************************************************");
                    System.out.println("*                                                      *");                                    
                    System.out.println("*    Session Timeout! returning to Movie selection.    *");
                    System.out.println("*                                                      *");
                    System.out.println("********************************************************");
                    System.out.println("");
                    seatBasket = new ArrayList<String>(); 
                    age = new ArrayList<String>();
                    price =0;
                    last_card = "";
                    try {
                        Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                        PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                        update.setString(1, "Unsuccessful");
                        update.setString(2, "Session Timeout");
                        update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                        update.setString(4, user_id);
                        update.executeUpdate();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    return 6;
                }
            }
            catch(IOException e) {
                e.printStackTrace();
            }

            int choiceInt = Integer.parseInt(choice);
            
            

            if(age.get(choiceInt - 1).contains("Child")){
                price -= 15.99;
            }
            else if(age.get(choiceInt - 1).contains("Student")){
                price -= 20.99;
            }
            else if(age.get(choiceInt - 1).contains("Adult")){
                price -= 24.99;
            }
            if(seatBasket.get(choiceInt - 1).contains("Front")){
                user_session_selection.booked_front_seat -= 1;
    
            }
            else if (seatBasket.get(choiceInt - 1).contains("Middle")){
                user_session_selection.booked_middle_seat -= 1;
            }
            else if (seatBasket.get(choiceInt - 1).contains("Rear")){
                user_session_selection.booked_back_seat -= 1;
            }
            seatBasket.remove(choiceInt - 1);
            age.remove(choiceInt - 1);
            System.out.println("Seat removed!");
        }
        catch(Exception e){
            System.out.println("Please input a number corresponding to your seat.");
        }
        return 10;

    }
    public int seatPage(){
        System.out.println("------------------------------------------------\n");
        System.out.println("New Seat");
        System.out.println("Pick your seat type: ");
        System.out.println("[1] Front");
        System.out.println("[2] Middle");
        System.out.println("[3] Rear");
        System.out.println("Enter 'q' to go to previous page");
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);
        String choice = "";

        try{
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < timeout * 1000
                    && !in.ready()) {
                }
            if (in.ready()) {
                choice = in.readLine();
            } else {
                System.out.println("");
                System.out.println("********************************************************");
                System.out.println("*                                                      *");                                    
                System.out.println("*    Session Timeout! returning to Movie selection.    *");
                System.out.println("*                                                      *");
                System.out.println("********************************************************");
                System.out.println("");
                seatBasket = new ArrayList<String>(); 
                age = new ArrayList<String>();
                price =0;
                try {
                    Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                    PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                    update.setString(1, "Unsuccessful");
                    update.setString(2, "Session Timeout");
                    update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                    update.setString(4, user_id);
                    update.executeUpdate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return 6;
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }

        if(choice.equals("q")){
            return 10;
        }
        else if(choice.equals("1")){
            if(user_session_selection.max_front_seat - user_session_selection.booked_front_seat > 0){
                seatBasket.add("Front");
                lastSelectedSeat = "front";
                
                return 14;
            }
            else{
                System.out.println("Front seat is not available.");
                return 11;
            }
            
        }
        else if(choice.equals("2")){
            if(user_session_selection.max_middle_seat - user_session_selection.booked_middle_seat > 0){
                seatBasket.add("Middle");
                lastSelectedSeat = "middle";
                
                return 14;
            }
            else {
                System.out.println("Middle seat is not available.");
                return 11;
            }
    
        }
        else if(choice.equals("3")){
            if(user_session_selection.max_back_seat - user_session_selection.booked_back_seat > 0){
                seatBasket.add("Rear");
                lastSelectedSeat = "back";
                return 14;
            }
            else{
                System.out.println("Rear seat is not available.");
                return 11;
            }
        }
        return 11;

    }
    public int agePage(){
        System.out.println("------------------------------------------------\n");
        System.out.println("Ticket choice: ");
        System.out.println("[1] Child(Under 12) ----- $15.99");
        System.out.println("[2] Student ----- $20.99");
        System.out.println("[3] Adult ----- $24.99");
        System.out.println("Enter 'q' to go back to previous page");
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);
        String choice = "";

        try{
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < timeout * 1000
                    && !in.ready()) {
                }
            if (in.ready()) {
                choice = in.readLine();
            } else {
                System.out.println("");
                System.out.println("********************************************************");
                System.out.println("*                                                      *");                                    
                System.out.println("*    Session Timeout! returning to Movie selection.    *");
                System.out.println("*                                                      *");
                System.out.println("********************************************************");
                System.out.println("");
                seatBasket = new ArrayList<String>(); 
                age = new ArrayList<String>();
                last_card = "";
                price =0;
                try {
                    Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                    PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                    update.setString(1, "Unsuccessful");
                    update.setString(2, "Session Timeout");
                    update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                    update.setString(4, user_id);
                    update.executeUpdate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return 6;
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }

        if(choice.equals("q")){
            seatBasket.remove(seatBasket.size()-1);
            return 11;
        }
        else if(choice.equals("1")){
            price += 15.99;
            age.add("Child(Under 12) ----- $15.99");
            if(lastSelectedSeat.equals("front")){
                user_session_selection.booked_front_seat += 1;
    
            }
            else if(lastSelectedSeat.equals("middle")){
                user_session_selection.booked_middle_seat += 1;
            }
            else if(lastSelectedSeat.equals("back")){
                user_session_selection.booked_back_seat += 1;
            }
            return 10;
        }
        else if(choice.equals("2")){
            price += 20.99;
            age.add("Student ----- $20.99");
            if(lastSelectedSeat.equals("front")){
                user_session_selection.booked_front_seat += 1;
    
            }
            else if(lastSelectedSeat.equals("middle")){
                user_session_selection.booked_middle_seat += 1;
            }
            else if(lastSelectedSeat.equals("back")){
                user_session_selection.booked_back_seat += 1;
            }
            return 10;
        }
        else if(choice.equals("3")){
            price += 24.99;
            age.add("Adult ----- $24.99");
            if(lastSelectedSeat.equals("front")){
                user_session_selection.booked_front_seat += 1;
    
            }
            else if(lastSelectedSeat.equals("middle")){
                user_session_selection.booked_middle_seat += 1;
            }
            else if(lastSelectedSeat.equals("back")){
                user_session_selection.booked_back_seat += 1;
            }
            return 10;
        }
        return 14;

    }

    public int customerLogIn(boolean debug) {

        Scanner sc = new Scanner(System.in);
        Console console = System.console();
        System.out.println("Enter your Username");
        System.out.println("(enter q to go back)");
        user_id = sc.nextLine();
        if (user_id.equals("q")){
            return 1;
        }
        System.out.println("Enter your password");
        String password = masking(debug, sc);
        

        try {
            Connection conn = DriverManager.getConnection(CREDENTIALS_STRING);
            PreparedStatement preStatement = conn.prepareStatement("SELECT * FROM User_account WHERE uid = ? and password = ?");
            preStatement.setString(1, user_id);
            preStatement.setString(2, new String(password));
            ResultSet resultSet = preStatement.executeQuery();
            if (resultSet.next() == false) {
                System.out.println("Username does not exist, or password is incorrect.");
                return 3;
            }
            else {
                System.out.println("\n------------------------------------------------");
                System.out.printf("Welcome back, %s!\n", resultSet.getString("name"));
                System.out.println("------------------------------------------------");
                user = new User(resultSet.getString("name"));
                login_status = 1;
                return 5;
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
        return 3;
    }

    public int customerRegister() {
        Scanner sc = new Scanner(System.in);
        Console console = System.console();
        System.out.println("Enter your new Username");
        System.out.println("(enter q to go back)");
        String id = sc.nextLine();
        if (id.equals("q")){
            return 1;
        }
        try {
            Connection conn = DriverManager.getConnection(CREDENTIALS_STRING);
            PreparedStatement preStatement = conn.prepareStatement("SELECT * FROM User_account WHERE uid = ?");
            preStatement.setString(1, id);
            ResultSet resultSet = preStatement.executeQuery();
            if (resultSet.next() == true) {
                System.out.println("This Username already exists! Please choose another one");
                return 4;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Enter your name");
        String name = sc.nextLine();
        System.out.println("Enter your new password");
        String password = sc.nextLine();

        try {
            Connection conn = DriverManager.getConnection(CREDENTIALS_STRING);
            PreparedStatement insert = conn.prepareStatement("INSERT INTO User_account (uid, name, password)" + "VALUES (?, ?, ?)");
            insert.setString(1, id);
            insert.setString(2, name);
            insert.setString(3, password);
            insert.executeUpdate();
            System.out.printf("Welcome to the club, %s!\n", name);
            login_status = 1;
            return 5;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return 4;
    }

    public int customerSelect() {
        System.out.println("------------------------------------------------\n");

        System.out.println("[1] Continue as Guest");
        System.out.println("[2] Login");
        System.out.println("[3] Register");
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);
        if(sc.hasNextInt()) { //checks if input is an int
            int num = sc.nextInt();
            System.out.println("------------------------------------------------\n");
            if (num == 1 ){
                return 5;
            }
            else if( num == 2) {
                return 3; 
            } 
            else if (num ==3){
                return 4;
            }
            else {
                System.out.println("Please choose valid option");
                return 1;
            }
        } 
        else {
            System.out.println("Please choose valid option");
            return 1;
        }
    }


    public int customerInterfaceSelection(int type){
        System.out.println("-----------Option-----------");
        System.out.println("[1] Insert movie to database.");
        System.out.println("[2] Modify movie in database.");
        System.out.println("[3] Delete movie in database.");
        System.out.println("[4] Insert show for upcoming week.");
        System.out.println("[5] Insert giftcard.");
        System.out.println("[6] Generate summary of upcoming movies list.");
        System.out.println("[7] Generate summary of bookings for each movie session.");
        if(type ==1){
            System.out.println("[8] Add cinema staff.");
            System.out.println("[9] remove cinema staff.");
            System.out.println("[10] Generate summary of cancelled transaction.");
        }
    
        String input = "";

        try{
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < timeout * 1000
                    && !in.ready()) {
                }
            if (in.ready()) {
                input = in.readLine();
            } else {
                System.out.println("");
                System.out.println("********************************************************");
                System.out.println("*                                                      *");                                    
                System.out.println("*    Session Timeout! return to login                  *");
                System.out.println("*                                                      *");
                System.out.println("********************************************************");
                System.out.println("");
                employee.isTimeout = 1;
                return 11;
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }
        int choice = 0;
        try {
            choice = Integer.parseInt(input);
        }
        catch(Exception e){
            e.printStackTrace();
            employee.isTimeout = 1;
            return 11;
        }
    
        return choice;
    }

    public List<Movie> getMovies(){
        List<Movie> movies = new ArrayList<>();
        
        try { 
            Connection connadd = DriverManager.getConnection(  CREDENTIALS_STRING);
            PreparedStatement preStatementadd = connadd.prepareStatement("SELECT title, mid FROM Movies;");
            // process the results
            ResultSet rs = preStatementadd.executeQuery();
            while ( rs.next() )
            {
                Movie movie = new Movie(rs.getString("title"), rs.getInt("mid"));
                movies.add(movie);
            }
            rs.close();
            preStatementadd.close();

        }
        catch (Exception e){
            System.out.println("DB Connection Error");
        }
        
        return movies;
    }

    public List<Cinema> getCinemas(){
      
        List<Cinema> cinemas = new ArrayList<>();
        try { 
            Connection connadd = DriverManager.getConnection(  CREDENTIALS_STRING);
            PreparedStatement preStatementadd = connadd.prepareStatement("SELECT clocation, cid FROM Cinema;");
            // process the results
            ResultSet rs = preStatementadd.executeQuery();
            while ( rs.next() )
            {
                Cinema cinema = new Cinema(rs.getString("clocation"), rs.getInt("cid"));
                cinemas.add(cinema);
            }
            rs.close();
            preStatementadd.close();

        }
        catch (Exception e){
            System.out.println("DB Connection Error");
        }
        
        return cinemas;
    }


    public List<Session> getSessions(){
        List<Session> sessions = new ArrayList<>();
        try { 
            Connection connadd = DriverManager.getConnection(  CREDENTIALS_STRING);
            PreparedStatement preStatementadd = connadd.prepareStatement("SELECT sid, mid, cid, movie_time,screen_type,booked_front_seat,booked_middle_seat,booked_back_seat FROM Current_week;");
            // process the results
            ResultSet rs = preStatementadd.executeQuery();
            while ( rs.next() )
            {
                Session session = new Session(rs.getInt("sid"), rs.getInt("mid"), rs.getInt("cid"), rs.getString("screen_type"),rs.getTimestamp("movie_time"),rs.getInt("booked_front_seat"),rs.getInt("booked_middle_seat"),rs.getInt("booked_back_seat"));
                sessions.add(session);
            }
            rs.close();
            preStatementadd.close();

        }
        catch (Exception e){
            System.out.println("DB Connection Error");
        }
       
        return sessions;
    }
    //return state 
    public int selectCinema(){
        System.out.println("\nPlease Select Cinema.");
        int i = 0;
        while( i < cinemas.size()){
            int z = i+1;
            System.out.println("["+z+"] "+ cinemas.get(i).clocation);
            i++;
        }
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);

        String input ="";
        
        try{
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < timeout * 1000
                    && !in.ready()) {
                }
            if (in.ready()) {
                input = in.readLine();
            } else {
                System.out.println("");
                System.out.println("********************************************************");
                System.out.println("*                                                      *");                                    
                System.out.println("*    Session Timeout: Automatically logoff             *");
                System.out.println("*                                                      *");
                System.out.println("********************************************************");
                System.out.println("");
                login_status = 0;
                user = null;
                return 1;
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }
        int choice;

        try{
             choice = Integer.parseInt(input);
        } catch (Exception e){
            System.out.println("Please enter valid option.");
            return 5;
        }
        if (choice > cinemas.size()){
            System.out.println("Please enter valid option.");
            return 5;
        }
        else{
            user_cinema_selection = cinemas.get(choice-1);
            return 6;
        }


    }
    //retunr state 
    public int selectMovie(){
        System.out.println("------------------------------------------------\n");
        System.out.print("Available movie at ");
        System.out.println(user_cinema_selection.clocation);
        System.out.println("");
        update_available_movies();
        String movie_name = "";
        for(int i =0; i < available_movies.size(); i++){
            for (int j = 0; j< movies.size(); j++){
                if(movies.get(j).mid == available_movies.get(i)){ 
                    movie_name = movies.get(j).title;
                }
            }
            System.out.println("[" + (i+1) + "] " + movie_name);
        }
        System.out.println("(enter 0 to go back)");
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);
        String input ="";
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        try{
           
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < timeout * 1000
                    && !in.ready()) {
                }
            if (in.ready()) {
                input = in.readLine();
            } else {
                System.out.println("");
                System.out.println("********************************************************");
                System.out.println("*                                                      *");                                    
                System.out.println("*    Session Timeout: Automatically logoff             *");
                System.out.println("*                                                      *");
                System.out.println("********************************************************");
                System.out.println("");
                login_status = 0;
                user = null;
                return 1;
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }
        int choice = 0;
        try{
            choice = Integer.parseInt(input);
            if (choice == 0){
                return 5;
            }
        } catch(Exception e){
            System.out.println("Please enter valid option.");
            return 6;
        }

        if (choice > available_movies.size()){
            System.out.println("-------------------------");
            System.out.println("Please enter valid option.");
            System.out.println("-------------------------");
            return 6;
        } else{
            for (int i =0 ; i < movies.size(); i++){
                if(movies.get(i).mid == available_movies.get(choice-1)){ 
                    user_movie_selection = movies.get(i);
                }
            }
 
        }
        System.out.println("------------------------------------------------\n");
        System.out.println("Your Selection is " + user_movie_selection.title +"\n");
        System.out.println("[1] View detail");
        System.out.println("[2] Show schedule");
        System.out.println("\n------------------------------------------------");

        try{
      
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < timeout * 1000
                    && !in.ready()) {
                }
            if (in.ready()) {
                input = in.readLine();
            } else {
                System.out.println("");
                System.out.println("********************************************************");
                System.out.println("*                                                      *");                                    
                System.out.println("*    Session Timeout: Automatically logoff             *");
                System.out.println("*                                                      *");
                System.out.println("********************************************************");
                System.out.println("");
                login_status = 0;
                user = null;
                return 1;
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }
        try {
            choice = Integer.parseInt(input);
        } catch(Exception e){
            System.out.println("-------------------------");
            System.out.println("Please enter valid option.");
            System.out.println("-------------------------");
            return 6;
        }
        if (choice > 2){
            System.out.println("-------------------------");
            System.out.println("Please enter valid option.");
            System.out.println("-------------------------");
            return 6;
        }
        if (choice == 1){
            return 7;
        }
        if (choice == 2){
            return 8;
        }
        return 7;
    }

    public int viewDetail(){
        try { 
            Connection connadd = DriverManager.getConnection(  CREDENTIALS_STRING);
            PreparedStatement statement = connadd.prepareStatement("SELECT mid, title, synopsis, classification, release_date, director, cast FROM Movies where mid =?;");
            // process the results
            statement.setInt(1, user_movie_selection.mid);
            ResultSet rs = statement.executeQuery();
            while ( rs.next() )
            {   
                System.out.println("---------------------------------------------");
                System.out.println("Movie title: " +rs.getString("title")+"\n");
                System.out.println("Synopsis: " +rs.getString("synopsis")+"\n");
                System.out.println("Classification: " +rs.getString("classification")+"\n");
                System.out.println("Release_date: " +rs.getString("release_date")+"\n");
                System.out.println("Director: " +rs.getString("director")+"\n");
                System.out.println("Cast: " +rs.getString("cast")+"\n");
                System.out.println("---------------------------------------------");
                System.out.println("(enter q to go back)");
            }

            rs.close();
            statement.close();
            Scanner sc = new Scanner(System.in);
            String input;
            while(true){
                input = sc.nextLine();
                if (input.equals("q")){
                    return 6;
                }
            }
        }
        catch (Exception e){
            System.out.println("DB Connection Error");
        }
        return 6;
    }

    public int ShowSchedule(){
        System.out.println("------------------------------------------------\n");
        System.out.println("Cinema: " + user_cinema_selection.clocation);
        List<Session> movie_session = new ArrayList<Session>();
        for (int i =  0; i < sessions.size(); i++){
            if  (sessions.get(i).mid ==  user_movie_selection.mid)
                if (sessions.get(i).cid == user_cinema_selection.cid)
                    movie_session.add(sessions.get(i));
        }
        System.out.println("Please choose session to book.");
        for (int i = 0; i< movie_session.size(); i++){
            System.out.println("["+(i+1)+"] " +  "Movie: " +user_movie_selection.title + ", Screen type: "+movie_session.get(i).screen_type+ ", Time: " +movie_session.get(i).movieTime );
        }
        System.out.println("(enter 0 to go back)");
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);
        int input;
        try{
            input = sc.nextInt();
            if (input == 0){
                return 6;
            }
        } catch (Exception e){
            System.out.println("Please enter valid option.");
            return 8;
        }
        if (input > movie_session.size()){
            System.out.println("Please enter valid option.");
            return 8;
        }
        if (login_status == 0){
            System.out.println("Please Login before proceed.");
            return 1;
        }
        user_session_selection = movie_session.get(input-1);
        return 9;
    }
    
    public void update_available_movies(){
        available_movies = new ArrayList<Integer>();
        for(int i =0; i < sessions.size(); i++){
            if (sessions.get(i).cid == user_cinema_selection.cid ){
                if (available_movies.contains(sessions.get(i).mid)){
                    ;
                }
                else{
                    available_movies.add(sessions.get(i).mid);
                }
            }
           
        }
    }

    public int payment() {
        System.out.println("------------------------------------------------\n");
        System.out.printf("Your current Account Balance: $%.2f\n", user.balance);
        System.out.printf("Total amount: $%.2f\n", this.price);
        System.out.println("[1] Redeem Gift Card");
        System.out.println("[2] Pay with Balance");
        System.out.println("[3] Pay with new Credit Card");
        System.out.println("[4] Pay with saved Credit Card");
        System.out.println("[5] Cancel");
        System.out.println("\n------------------------------------------------");
        Scanner sc = new Scanner(System.in);
        String input = "";
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        try{
            
            long startTime = System.currentTimeMillis();
            while ((System.currentTimeMillis() - startTime) < timeout * 1000
                    && !in.ready()) {
                }
            if (in.ready()) {
                input = in.readLine();
            } else {
                System.out.println("");
                System.out.println("********************************************************");
                System.out.println("*                                                      *");                                    
                System.out.println("*    Session Timeout! returning to Movie selection.    *");
                System.out.println("*                                                      *");
                System.out.println("********************************************************");
                System.out.println("");
                seatBasket = new ArrayList<String>(); 
                age = new ArrayList<String>();
                price =0;
                last_card = "";
                try {
                    Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                    PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                    update.setString(1, "Unsuccessful");
                    update.setString(2, "Session Timeout");
                    update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                    update.setString(4, user_id);
                    update.executeUpdate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return 6;
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }

        if (input.equals("1")) {
            System.out.println("Enter Gift Card code");
            String code = "";

            try{
                long startTime = System.currentTimeMillis();
                while ((System.currentTimeMillis() - startTime) < timeout * 1000
                        && !in.ready()) {
                    }
                if (in.ready()) {
                    code = in.readLine();
                } else {
                    System.out.println("");
                    System.out.println("********************************************************");
                    System.out.println("*                                                      *");                                    
                    System.out.println("*    Session Timeout! returning to Movie selection.    *");
                    System.out.println("*                                                      *");
                    System.out.println("********************************************************");
                    System.out.println("");
                    seatBasket = new ArrayList<String>(); 
                    age = new ArrayList<String>();
                    price =0;
                    last_card = "";
                    try {
                        Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                        PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                        update.setString(1, "Unsuccessful");
                        update.setString(2, "Session Timeout");
                        update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                        update.setString(4, user_id);
                        update.executeUpdate();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    return 6;
                }
            }
            catch(IOException e) {
                e.printStackTrace();
            }
    

            if (code.equals("q")) {
                return 13;
            }
            return user.redeemGiftCard(code);

        } else if (input.equals("2")) {
            if (user.payWithBalance(this.price)) {
                return 16;
            } else {
                return 13;
            }

        } else if (input.equals("3")) {
            if (App.price == 0) {
                System.out.println("Basket is empty");
                return 13;
            }
            System.out.println("Please enter Card holder's name");
            String name = "";
            try{
                long startTime = System.currentTimeMillis();
                while ((System.currentTimeMillis() - startTime) < timeout * 1000
                        && !in.ready()) {
                    }
                if (in.ready()) {
                    name = in.readLine();
                } else {
                    System.out.println("");
                    System.out.println("********************************************************");
                    System.out.println("*                                                      *");                                    
                    System.out.println("*    Session Timeout! returning to Movie selection.    *");
                    System.out.println("*                                                      *");
                    System.out.println("********************************************************");
                    System.out.println("");
                    seatBasket = new ArrayList<String>(); 
                    age = new ArrayList<String>();
                    price =0;
                    last_card = "";
                    try {
                        Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                        PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                        update.setString(1, "Unsuccessful");
                        update.setString(2, "Session Timeout");
                        update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                        update.setString(4, user_id);
                        update.executeUpdate();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    return 6;
                }
            }
            catch(IOException e) {
                e.printStackTrace();
            }

            if (name.equals("q")) {
                return 13;
            }
            System.out.println("Please enter Credit Card number");
   

            try{
                long startTime = System.currentTimeMillis();
                while ((System.currentTimeMillis() - startTime) < timeout * 1000
                        && !in.ready()) {
                    }
                if (in.ready()) {
                    last_card = in.readLine();
                } else {
                    System.out.println("");
                    System.out.println("********************************************************");
                    System.out.println("*                                                      *");                                    
                    System.out.println("*    Session Timeout! returning to Movie selection.    *");
                    System.out.println("*                                                      *");
                    System.out.println("********************************************************");
                    System.out.println("");
                    seatBasket = new ArrayList<String>(); 
                    age = new ArrayList<String>();
                    price =0;
                    last_card = "";
                    try {
                        Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                        PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                        update.setString(1, "Unsuccessful");
                        update.setString(2, "Session Timeout");
                        update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                        update.setString(4, user_id);
                        update.executeUpdate();
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    return 6;
                }
            }
            catch(IOException e) {
                e.printStackTrace();
            }

            if (last_card.equals("q")) {
                return 13;
            }
            if (user.payWithCreditCard(name, last_card)) {
                pay_with_card = true;
                return 16;
            } else {
                try {
                    Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                    PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status, detail, date_time, user_id) VALUES (?, ?, ?, ?);");
                    update.setString(1, "Unsuccessful");
                    update.setString(2, "Invalid Card");
                    update.setTimestamp(3, new Timestamp(System.currentTimeMillis()));
                    update.setString(4, user_id);
                    update.executeUpdate();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return 13;
            }

        } else if (input.equals("4")) {
            if (App.price == 0) {
                System.out.println("Basket is empty");
                return 13;
            }
            if (user.payWithSavedCard()) {
                return 15;
            } else {
                return 13;
            }

        } else if (input.equals("5")) {
            return 10;
        }

        System.out.println("Please enter a valid option.");
        return 13;
    }
    public int printTransaction(){

        try {
            Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
            PreparedStatement update = conne.prepareStatement("INSERT INTO Transaction (status) VALUES ('Successful');");
            update.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
        try { 
            Connection connadd = DriverManager.getConnection(  CREDENTIALS_STRING);
            PreparedStatement statement = connadd.prepareStatement("SELECT max(tid) as max_tid FROM Transaction;");

            ResultSet rs = statement.executeQuery();
            rs.next();
            int new_tid  = rs.getInt("max_tid");
            System.out.println("------------------------------------------------\n");
            System.out.printf("Transaction id: %d\n", new_tid );
            System.out.printf("Status: Payment Successful\n\n");
            int j = 0;
            int k = 1;
            System.out.println("Tickets:");
            for(String i: seatBasket){
                System.out.println( k + ". "  + i + ", " + age.get(j));
                j+=1;
                k+=1;
            }
            System.out.println("");

            System.out.printf("Show this to collect tickets at the cinema.\n");
            System.out.println("\n------------------------------------------------");
            updateDatabaseSeat();
            seatBasket = new ArrayList<String>(); 
            age = new ArrayList<String>();
            price =0;
            last_card = "";
            rs.close();
            statement.close();
            

        }
        catch (Exception e){
            System.out.println("DB Connection Error");
        }

        return 5;
    }
    public void updateDatabaseSeat(){
        try {
            Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
            PreparedStatement update = conne.prepareStatement("UPDATE Current_week SET booked_front_seat = ?, booked_middle_seat = ?, booked_back_seat =? WHERE sid = ?");
    
            update.setInt(1, user_session_selection.booked_front_seat);
            update.setInt(2, user_session_selection.booked_middle_seat);
            update.setInt(3, user_session_selection.booked_back_seat);
            update.setInt(4, user_session_selection.sid);
            update.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public String masking(boolean debug , Scanner sc){
        if(debug == false){
            return passwordInput("");
        }
        else{
            return sc.nextLine();

        }
    }
    public static String passwordInput(String message) {
        String password;
        if (System.console() == null) {
            JPasswordField jPasswordField = new JPasswordField();
            int rs = JOptionPane.showConfirmDialog(null, jPasswordField, message, JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (rs == JOptionPane.OK_OPTION) {
                password = new String(jPasswordField.getPassword());
            } else {
                password = "";
            }

            return password;
        } else {
            return "";
        }
    }
    public int saveCard(){
        if(last_card.equals("") || last_card.equals("q")){
            return 15;
        }
        System.out.println("Do you want to save this card?");
        System.out.println("(enter y for Yes)");
        Scanner sc = new Scanner(System.in);
        String input = sc.nextLine();
        if (input.equals("y")){
            try {
                Connection conne = DriverManager.getConnection(CREDENTIALS_STRING);
                PreparedStatement update = conne.prepareStatement("UPDATE User_account SET cardno = ? WHERE uid = ?");
    
                update.setString(1, last_card);
                update.setString(2, user_id);
                update.executeUpdate();
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
        return  15;
    }

}
